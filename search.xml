<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Home</title>
    <url>/2023/06/08/home/</url>
    <content><![CDATA[<p>I am currently a master student at <a
href="https://www.ecnu.edu.cn/">ECNU</a>. My recent research interest
mainly focuses on multi-modal learning (especially combined with LLMs).
You can <a href="mailto:ifshine_lx@163.com">email</a> me for further
communication.</p>
<p><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/home.jpg" /></p>
]]></content>
  </entry>
  <entry>
    <title>LLaMA-Adapter: Efficient Fine-tuning of Language Models with Zero-init Attention</title>
    <url>/2023/06/09/llama-adapter-v1/</url>
    <content><![CDATA[<p><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-1.jpg"
alt="authors" />Paper: <a
href="https://arxiv.org/pdf/2303.16199.pdf">https://arxiv.org/pdf/2303.16199.pdf</a></p>
<p>Code: <a
href="https://github.com/ZrrSkywalker/LLaMA-Adapter">https://github.com/ZrrSkywalker/LLaMA-Adapter</a></p>
<p>More Info:</p>
<p><a
href="https://lightning.ai/pages/community/article/understanding-llama-adapters/">Lighting
AI | understanding-llama-adapters</a></p>
<p><a href="https://github.com/Lightning-AI/lit-parrot">Lighting AI |
Lit-Parrot: lightweight update of llama</a></p>
<p><strong><em>When reading this note, you can think about the following
questions:</em></strong></p>
<ol type="1">
<li>What is learnable adaption prompts?</li>
<li>What is zero-init attention?</li>
<li>How to extend LLaMA-Adapter to multi-modal input?</li>
<li>Instruction-Following VL Models?</li>
<li>LLaMA-Adapter displays instruction-following and multi-modal
capabilities respectively, without showing multi-modal
instruction-following capabilities.
<ul>
<li>using pre-trained modal-specific encoders, we can integrate
instructional signals of different modalities into the adaption
prompts</li>
</ul></li>
<li>What are training hours of multi-modal variant?</li>
<li>In zero-init attention, if we exchange the order between
"projection" and "repeat", how will the param num, training time and
final performance change?</li>
</ol>
<hr />
<h2 id="related-work">Related Work</h2>
<h3 id="instruction-following-models">Instruction-Following Models</h3>
<p>Instruction-following capabilities: understand user intentions and
follow instructions accurately.</p>
<p>Closed-source restriction and high training costs imped
instruction-following models' development.</p>
<p>But LLaMA-Adapter is computation-efficient and achieves high
performance.</p>
<p><em>Language Modality:</em></p>
<ul>
<li><a href="https://arxiv.org/pdf/2109.01652.pdf">FLAN</a>: introduces
an instruction tuning method</li>
<li><a href="https://arxiv.org/pdf/2202.01279.pdf">PromptSource</a>: a
web-based GUI for creating and managing natural language prompt</li>
<li><a
href="https://aclanthology.org/2022.emnlp-main.340.pdf">SUP-NATINST</a>:
an benchmark of instructions on 1,616 NLP tasks</li>
<li><a href="https://arxiv.org/pdf/2203.02155.pdf">InstructGPT</a>:
RLHF, significant performance improvements</li>
<li><strong><a
href="https://github.com/tatsu-lab/stanford_alpaca">Alpaca</a>:
data-efficient(self-instruction), high costs(fine-tuning)</strong></li>
</ul>
<p><em>Multi-modality:</em></p>
<ul>
<li><a href="https://arxiv.org/pdf/1912.01734.pdf">ALFRED</a>: a
benchmark for robotics instruction following</li>
<li><a href="https://arxiv.org/pdf/2110.07342.pdf">FILM</a>: a modular
method for robotics instruction following</li>
</ul>
<h3 id="large-vision-language-models">Large Vision-Language Models</h3>
<p>Recently, some researchers adopt pre-trained unimodal models as
initialization and only train the newly introduced parameters. They use
mapping networks or cross-attention layers to connect two
modalities.</p>
<p>As a new method, LLaMA-Adapter also belongs to this line of work.</p>
<ul>
<li><a href="https://arxiv.org/pdf/2106.13884.pdf">Frozen</a>:
fine-tunes an image encoder to transform visual tokens into LLM’s soft
prompts</li>
<li><a href="https://arxiv.org/pdf/2111.07991.pdf">LiT</a>: utilizes
pretrained image encoder to speed up CLIP training</li>
<li><a href="https://arxiv.org/pdf/2111.09734.pdf">CLIPCap</a>: proposes
a mapping network to connect the pre-trained image encoder with
LLMs</li>
<li><a href="https://arxiv.org/pdf/2110.04544.pdf">CLIP-Adapter</a>, <a
href="https://arxiv.org/pdf/2111.03930.pdf">Tip-Adapter</a> and <a
href="https://arxiv.org/pdf/2112.02413.pdf">PointCLIP</a>: introduce
customized adapters upon CLIP for 2D and 3D few-shot learning</li>
<li><a href="https://arxiv.org/pdf/2204.14198.pdf">Flamingo</a>: inserts
several cross-attention layers to inject visual knowledge into LLMs</li>
<li><a href="https://arxiv.org/pdf/2301.12597.pdf">BLIP2</a>: connects
pre-trained image encoders and LLMs with a Q-Former</li>
</ul>
<h3 id="parameter-efficient-fine-tuningpeft">Parameter-Efficient
Fine-Tuning(PEFT)</h3>
<p><a href="https://github.com/huggingface/peft">PEFT</a> does not
update all model parameters.</p>
<p>With zero-init attention(stablity improvement) and unified
multi-modal tuning(unimodal to multi-modal), LLaMA-Adapter is distinct
from existing PEFT methods.</p>
<ul>
<li><a href="https://arxiv.org/pdf/2101.00190.pdf">Prefix Tuning</a>:
appends prefixes to autoregressive LMs</li>
<li><a href="https://arxiv.org/pdf/2106.09685.pdf">LoRA</a>: introduces
trainable rank decomposition matrices into each layer</li>
<li><a href="https://arxiv.org/pdf/1902.00751.pdf">Adapters</a>:
involves inserting lightweight trainable modules into each layer of
pre-trained models</li>
</ul>
<p><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-12.png" />
<a href="https://aclanthology.org/2022.acl-long.433.pdf">(UniPELT: A
Unified Framework for Parameter-Efficient Language Model Tuning)</a></p>
<h2 id="method">Method</h2>
<p><em>4 characteristics of LLaMA-Adapter:</em></p>
<ol type="1">
<li>1.2M Parameters</li>
<li>1 Hour: 8 A100 GPUs, three times faster than Alpaca</li>
<li>Plug with Expertise: insert their respective adapters and endow
LLaMA with different expert knowledge</li>
<li>Multi-modal: simply add images tokens into adaption prompts <img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1--2.jpg"
alt="LLaMA-Adapter&#39;s 4 characteristics and details" /></li>
</ol>
<h3 id="learnable-adaption-prompts">Learnable Adaption Prompts</h3>
<ul>
<li><span class="math inline">\(K\)</span>: prompt length for each
layer</li>
<li><span class="math inline">\(C\)</span>: feature dim of
transformer</li>
<li><span class="math inline">\(N\)</span>: total transformer layer num
of LLaMA</li>
<li><strong><span class="math inline">\(\{ P_l \}_{l=1}^{L}\)</span>
(<span class="math inline">\(P_l\in\mathbb{R}^{K\times C}\)</span>) :
learnable adaption prompts</strong> for topmost <span
class="math inline">\(L (L\le N)\)</span> transformer layers with
higher-level semantic representations</li>
<li><span class="math inline">\(T_l\in\mathbb{R}^{M\times C}\)</span>:
<span class="math inline">\(M\)</span>-length word tokens in <span
class="math inline">\(l\)</span>-th inserted layer</li>
<li><span class="math inline">\([P_l;\space
T_l]\in\mathbb{R}^{(K+M)\times C}\)</span>: concatenate <span
class="math inline">\(P_l\)</span> and <span
class="math inline">\(T_l\)</span>, the learned <strong>instruction
knowledge</strong> in <span class="math inline">\(P_l\)</span> guides
<span class="math inline">\(T_l\)</span> to generate contextual
responses</li>
</ul>
<h3 id="zero-init-attention">Zero-init Attention</h3>
<p>If the adaption prompts are randomly initialized, they will bring
noise to the word tokens and damage original knowledge in LLaMA at the
early training stage, which harms stablity and effectiveness.</p>
<p><em><span class="math inline">\(t_l\in\mathbb{R}^{1\times
C}\)</span>: generate the (M+1)-th word <span
class="math inline">\(t_l\)</span> on top of <span
class="math inline">\([P_l;\space T_l]\)</span></em> at the <span
class="math inline">\(l\)</span>-th inserted layer</p>
<ol type="1">
<li>linear projection: queries <span
class="math inline">\(Q_l=Linear_q(t_l)\)</span>, keys <span
class="math inline">\(K_l=Linear_k([P_l;T_l;t_l])\)</span>, values <span
class="math inline">\(V_l=Linear_v([P_l;T_l;t_l])\)</span></li>
<li>attention scores: <span
class="math inline">\(S_l=\frac{Q_lK_l^T}{\sqrt{C}}\in\mathbb{R}^{1\times(K+M+1)}\)</span>,
records the feature similarities between <span
class="math inline">\(t_l\)</span> and all <span
class="math inline">\(K+M+1\)</span> tokens</li>
<li>reformulation: <span class="math inline">\(S_l=[S_l^K;S_l^{M+1}]^T,
S_l^K\in\mathbb{R}^{K\times 1}, S_l^{M+1}\in\mathbb{R}^{(M+1)\times
1}\)</span>
<ul>
<li><span class="math inline">\(S_l^K\)</span> represents how much
information the <span class="math inline">\(P_l\)</span> contribute to
<span class="math inline">\(t_l\)</span>, which probably causes noise in
the early training stage</li>
</ul></li>
<li>softmax operation: <span
class="math inline">\(S_l^g=[Softmax(S_l^K)·g_l;Softmax(S_l^{M+1})]^T\)</span>
<ul>
<li><span class="math inline">\(g_l\)</span> is a learnable gating
factor initialized by zero, adaptively controls the importance of <span
class="math inline">\(S_l^K\)</span></li>
<li>in practice, each head of attention has an independent <span
class="math inline">\(g_l\)</span></li>
</ul></li>
<li>output of the attention layer: <span
class="math inline">\(t_l^o=Linear_o(S_l^gV_l)\in\mathbb{R}^{1\times
C}\)</span></li>
</ol>
<h3 id="multi-modal-reasoning">Multi-modal Reasoning</h3>
<p><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-3.jpg" />
Task textual input: question + textual context + options</p>
<ol type="1">
<li>multi-scale global visual features: <span
class="math inline">\(\{I_m\}_{m=1}^{M},I_m\in\mathbb{R}^{1\times
C_m}\)</span>, <span class="math inline">\(M\)</span> is the scale num
<ul>
<li>from pre-trained CLIP</li>
</ul></li>
<li>overall image token: <span
class="math inline">\(I_p=Projection\Big(Concat\left(\{I_m\}_{m=1}^M\right)\Big)\in\mathbb{R}^{1\times
C}\)</span>
<ul>
<li>concatenate along the channel dim</li>
<li>utilize MLPs as the projection network with 0.6M parameters</li>
</ul></li>
<li>repeat <span class="math inline">\(I_p\)</span> for <span
class="math inline">\(K\)</span> times</li>
<li>multi-modal prompt: <span
class="math inline">\(P_l^v=P_l+Repeat(I_p)\in\mathbb{R}^{K\times
C}\)</span></li>
</ol>
<p><strong>Future work: using pre-trained modal-specific encoders, we
can integrate instructional signals of different modalities into the
adaption prompts</strong></p>
<h2 id="instruction-following-evaluation">Instruction-following
Evaluation</h2>
<p>Dataset: Alpaca-52K self-instruct data. LLaMA-Adapter paper wrongly
denotes as Alphaca-52K</p>
<p>Evaluation Metric: no rigorous metrics exist, so simply show some
response examples</p>
<p>Generation Stage Decoding Method: top-p sampling with a temperature
0.1 and a top-p = 0.75</p>
<p>Result: Comparison of Instruction-Following Capability, LLaMA-Adapter
is comparable to Alpaca with fully fine-tuned 7B parameters <img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-4.jpg"
alt="Comparison of Instruction-Following Capability" /></p>
<p>Result: Comparison with Instruct LLaMA (LLaMA-I, LLaMA-65B fine-tuned
on large-scale instructional data), LLaMA-Adapter can be further
enhanced with larger LLaMA, larger data, larger learnable parameters
<img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-5.jpg"
alt="Comparison with Instruct LLaMA (LLaMA-I)" /></p>
<p>Result: Efficiency Comparison <img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-6.jpg"
alt="Efficiency Comparison" /></p>
<h2 id="multi-modal-evaluation">Multi-modal Evaluation</h2>
<p>Dataset: ScienceQA</p>
<p>Evaluation Metric: Official question answering accuracy</p>
<p>Generation Stage Decoding Method: greedy search</p>
<p>Result: MM-CoT relies on the complex two-stage inference.
<strong>Future Work: leverage CoT to boost LLaMA-Adapter.</strong> <img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-7.jpg"
alt="ScienceQA" /></p>
<p>Result: table 6 shows robustness to over-fitting on the small
dataset. Even if LLaMA-Adapter has over-fitted the fine-tuning data(val
loss), the val acc is still increasing. <img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-8.jpg"
alt="Ablation Study" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>Future direction:</p>
<ul>
<li>wider multi-modal inputs(audio, video)
<ul>
<li>using pre-trained modal-specific encoders, we can integrate
instructional signals of different modalities into the adaption
prompts</li>
</ul></li>
<li>larger LLaMA(33B, 65B)</li>
<li>other LLMs</li>
<li>diverse benchmarks(VQA v2, OK-VQA, TVQA, DocVQA)
<ul>
<li>ScienceQA is only an understanding task</li>
</ul></li>
<li>leverage CoT to boost LLaMA-Adapter</li>
</ul>
<h2 id="code-implementation">Code Implementation</h2>
<h3 id="params">Params</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">accum_iter: 1. Accumulate gradient iterations (for increasing the effective batch size under memory constraints)</span><br><span class="line">batch_size: 4(per GPU). effective_batch_size = batch_size * accum_iter * gpu_num</span><br><span class="line">epoch: 5</span><br><span class="line">adapter_layer: 30. the num of adapter layer L</span><br><span class="line">adapter_len: 10. the adapter length K</span><br><span class="line">max_seq_len: 512. specifies the maximum number of input tokens. token num &gt;= word num.</span><br><span class="line">max_batch_size: 32.</span><br><span class="line">dim: 4096.</span><br><span class="line">n_heads: 32.</span><br><span class="line">n_layers: 32.</span><br><span class="line">weight_decay: 0.02.</span><br><span class="line">blr: 9e-3. base learning rate.</span><br><span class="line">lr: learning_rate(absolute lr), lr = blr * total_batch_size / 256</span><br><span class="line">min_lr: 0.0. lower lr bound for cyclic schedulers that hit 0</span><br><span class="line">warmup_epochs: 2.</span><br><span class="line">seed: 0.</span><br></pre></td></tr></table></figure>
<p>Why we need max_seq_len? For absolute position embedding(e.g., BERT,
Roberta, BART), it uses the index of each token to calculate and its
length is limited(max_seq_len). When the input token length exceeds
max_seq_len, <strong>"index error"</strong> will be caused. For other
position embedding methods(e.g., XLNet, T5), they have no limit of input
token length. But longer input token length brings <strong>heavier
memory burden</strong>, which may not necessarily lead to better
performance.</p>
<p>LLaMA uses Rotary Position Embedding: <a
href="https://zhuanlan.zhihu.com/p/627536105">分析 |
ROPE的不同实现：llama&amp;palm</a>, <a
href="http://t.csdn.cn/U3RXo">blog 2.3 RoPE旋转位置编码</a></p>
<h3 id="dataset">Dataset</h3>
<p>It seems that the val set is a sub set of the train set.(data_path is
same) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstructionDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_path, model_path, max_seq_len, partition=<span class="string">&quot;train&quot;</span></span>):</span><br><span class="line">        self.ann = json.load(<span class="built_in">open</span>(data_path))</span><br><span class="line">        <span class="keyword">if</span> partition == <span class="string">&quot;train&quot;</span>:</span><br><span class="line">            self.ann = self.ann</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.ann = self.ann[:<span class="number">200</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="learnable-adaption-prompts-1">Learnable Adaption Prompts</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Transformer</span>(nn.Module): <span class="comment"># Decoder</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, params: ModelArgs</span>):</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># randomly initialise the adaption prompts</span></span><br><span class="line">        <span class="comment"># github.com/OpenGVLab/LLaMA-Adapter/issues/9#issuecomment-1501705647</span></span><br><span class="line">        self.adapter_query = nn.Embedding(params.adapter_len * params.adapter_layer, params.dim)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, examples, labels</span>):</span><br><span class="line">        _bsz, seqlen = examples.shape</span><br><span class="line">        ...</span><br><span class="line">        mask = torch.full((<span class="number">1</span>, <span class="number">1</span>, seqlen, seqlen), <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>), device=h.device)</span><br><span class="line">        mask = torch.triu(mask, diagonal=<span class="number">0</span> + <span class="number">1</span>).type_as(h) <span class="comment"># Upper triangular matrix, and diagonal val is 0</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers[: -<span class="number">1</span> * self.adapter_layer]:</span><br><span class="line">            h = layer(h, start_pos, freqs_cis, mask)</span><br><span class="line">        adapter_index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># adapter.shape: (30, 1, 10, 4096)</span></span><br><span class="line">        adapter = self.adapter_query.weight.reshape(-<span class="number">1</span>, self.adapter_len, <span class="number">4096</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers[-<span class="number">1</span> * self.adapter_layer :]:</span><br><span class="line">            h = layer(h, start_pos, freqs_cis, mask, adapter[adapter_index].half())</span><br><span class="line">            adapter_index = adapter_index + <span class="number">1</span></span><br><span class="line">        output = self.output(self.norm(h))</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<ul>
<li>linear projection: queries <span
class="math inline">\(Q_l=Linear_q(t_l)\)</span>, keys <span
class="math inline">\(K_l=Linear_k([P_l;T_l;t_l])\)</span>, values <span
class="math inline">\(V_l=Linear_v([P_l;T_l;t_l])\)</span></li>
<li>attention scores: <span
class="math inline">\(S_l=\frac{Q_lK_l^T}{\sqrt{C}}\in\mathbb{R}^{1\times(K+M+1)}\)</span></li>
<li>reformulation: <span class="math inline">\(S_l=[S_l^K;S_l^{M+1}]^T,
S_l^K\in\mathbb{R}^{K\times 1}, S_l^{M+1}\in\mathbb{R}^{(M+1)\times
1}\)</span></li>
<li>softmax operation: <span
class="math inline">\(S_l^g=[Softmax(S_l^K)·g_l;Softmax(S_l^{M+1})]^T\)</span></li>
<li>output of the attention layer: <span
class="math inline">\(t_l^o=Linear_o(S_l^gV_l)\in\mathbb{R}^{1\times
C}\)</span></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Attention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, args: ModelArgs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># zero-init attention</span></span><br><span class="line">        self.gate = torch.nn.Parameter(torch.zeros(<span class="number">1</span>, self.n_local_heads, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x: torch.Tensor, start_pos: <span class="built_in">int</span>, freqs_cis: torch.Tensor, mask: <span class="type">Optional</span>[torch.Tensor], adapter=<span class="literal">None</span></span>):</span><br><span class="line">        bsz, seqlen, _ = x.shape</span><br><span class="line">        <span class="comment"># 1. three Linears for x</span></span><br><span class="line">        xq, xk, xv = self.wq(x), self.wk(x), self.wv(x)</span><br><span class="line">        xq = xq.view(bsz, seqlen, self.n_local_heads, self.head_dim)</span><br><span class="line">        xk = xk.view(bsz, seqlen, self.n_local_heads, self.head_dim)</span><br><span class="line">        xv = xv.view(bsz, seqlen, self.n_local_heads, self.head_dim)</span><br><span class="line">        <span class="comment"># 2. add position info via Rotary Position Embedding</span></span><br><span class="line">        xq, xk = apply_rotary_emb(xq, xk, freqs_cis=freqs_cis)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> adapter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            adapter_len = adapter.shape[<span class="number">1</span>] <span class="comment"># adapter.shape: (1, 10, 4096)</span></span><br><span class="line">            <span class="comment"># linear projection</span></span><br><span class="line">            <span class="comment"># adapter_k.shape: (bsz, adapter_len, self.n_local_heads, self.head_dim)</span></span><br><span class="line">            adapter_k = self.wk(adapter).view(<span class="number">1</span>, adapter_len, self.n_local_heads, self.head_dim).repeat(bsz, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            adapter_v = self.wv(adapter).view(<span class="number">1</span>, adapter_len, self.n_local_heads, self.head_dim).repeat(bsz, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            xk = torch.cat([adapter_k, xk], dim=<span class="number">1</span>)</span><br><span class="line">            xv = torch.cat([adapter_v, xv], dim=<span class="number">1</span>)</span><br><span class="line">            extra_mask = torch.zeros(<span class="number">1</span>, <span class="number">1</span>, seqlen, adapter_len).to(mask)</span><br><span class="line">            mask = torch.cat([extra_mask, mask], dim=-<span class="number">1</span>) <span class="comment"># (1, 1, seqlen, adapter_len + seqlen)</span></span><br><span class="line">        keys = xk</span><br><span class="line">        values = xv</span><br><span class="line"></span><br><span class="line">        xq = xq.transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        keys = keys.transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        values = values.transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 3. attention scores</span></span><br><span class="line">        scores = torch.matmul(xq, keys.transpose(<span class="number">2</span>, <span class="number">3</span>)) / math.sqrt(self.head_dim)</span><br><span class="line">        <span class="comment"># for decoder type, mask is needed to avoid using the information in the future.</span></span><br><span class="line">        <span class="comment"># the predictions for position i can depend only on the known outputs at positions less than i</span></span><br><span class="line">        <span class="comment"># mask.shape: (1, 1, seqlen, )</span></span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            scores = scores + mask  <span class="comment"># (bsz, n_local_heads, seqlen, adapter_len + seqlen)</span></span><br><span class="line">        <span class="comment"># 4. softmax</span></span><br><span class="line">        <span class="keyword">if</span> adapter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            scores = torch.cat(</span><br><span class="line">                [</span><br><span class="line">                    <span class="comment"># zero-init attention</span></span><br><span class="line">                    self.gate.tanh().half() * F.softmax(scores[:, :, :, :adapter_len].<span class="built_in">float</span>(), dim=-<span class="number">1</span>).type_as(xq),</span><br><span class="line">                    F.softmax(scores[:, :, :, adapter_len:].<span class="built_in">float</span>(), dim=-<span class="number">1</span>).type_as(xq),</span><br><span class="line">                ],</span><br><span class="line">                dim=-<span class="number">1</span>,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            scores = F.softmax(scores.<span class="built_in">float</span>(), dim=-<span class="number">1</span>).type_as(xq)</span><br><span class="line">        output = torch.matmul(scores, values)  <span class="comment"># (bs, n_local_heads, slen, head_dim)</span></span><br><span class="line">        output = output.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous().view(bsz, seqlen, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.wo(output)</span><br></pre></td></tr></table></figure>
<p>(images below are from <a
href="http://jalammar.github.io/illustrated-gpt2/">jalammar.github.io/illustrated-gpt2/</a>)
<img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-9.png" /><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-10.png" /><img
src="https://cdn.jsdelivr.net/gh/ifshinelx/blogimage@main/img/llama-adapter-v1-11.png" /></p>
]]></content>
      <categories>
        <category>paper</category>
        <category>2023</category>
        <category>03</category>
      </categories>
      <tags>
        <tag>LLaMA</tag>
        <tag>Adapter</tag>
        <tag>Multi-modal</tag>
        <tag>LLM</tag>
        <tag>Instruction-Following</tag>
        <tag>PEFT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Usage</title>
    <url>/2023/06/08/hexo-usage/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! Check <a
href="https://hexo.io/docs/">documentation</a> for more info. If you get
any problems when using Hexo, you can find the answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask for help on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>. Win11 is the
default OS in this post.</p>
<h2 id="hexo-install6.3.0">Hexo Install(6.3.0)</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli <span class="comment"># cmd with administrator permissions</span></span><br><span class="line">hexo -v <span class="comment"># check whether the installation is successful</span></span><br><span class="line"><span class="built_in">mkdir</span> &lt;root_dir&gt; <span class="comment"># create an empty dir</span></span><br><span class="line"><span class="built_in">cd</span> &lt;root_dir&gt;</span><br><span class="line">hexo init</span><br><span class="line">hexo s <span class="comment"># run server</span></span><br></pre></td></tr></table></figure>
<h2 id="next-theme8.17.0">Next Theme(8.17.0)</h2>
<p>Use <a
href="https://github.com/next-theme/hexo-theme-next">hexo-theme-next</a>
as an example. More info: <a href="https://theme-next.js.org/docs">Theme
Next Doc</a>, <a href="http://t.csdn.cn/Tu6fy">CSDN blog 1</a>, <a
href="http://t.csdn.cn/EmYFJ">CSDN blog 2</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line"><span class="comment"># open root_dir/_config.yml, replace &quot;theme: landscape&quot; with &quot;theme: next&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="deploy-to-github">Deploy to Github</h2>
<p>add ".gitignore" file to blog root dir: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br></pre></td></tr></table></figure> open cmd, then
cd blog root dir (win10) <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># install a plugin</span></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure> open root_dir/_config.yml, modify
"deploy" <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ifshinelx/ifshinelx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure> deploy (After the cmd execution, it takes several
minutes for the github page to refresh) For the first deployment, you
need to click <a
href="http://ifshinelx.github.io/ifshinelx.github.io">http://ifshinelx.github.io/ifshinelx.github.io</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># clean cache</span></span><br><span class="line">hexo g <span class="comment"># generate static files</span></span><br><span class="line">hexo d <span class="comment"># deploy to remote sites</span></span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<h2 id="personalization">Personalization</h2>
<h3 id="hexo-basic-info_config.yml">Hexo Basic Info(_config.yml)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: XinLiu&#x27;s Homepage, Welcome!</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: Xin Liu</span><br><span class="line">language: en</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br><span class="line"></span><br><span class="line">url: https://ifshinelx.github.io</span><br><span class="line">math:</span><br><span class="line">  every_page: false</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>
<h3 id="next-theme-settings-basic"><a
href="https://theme-next.js.org/docs/theme-settings/">NexT Theme
Settings Basic</a></h3>
<p>root_dir/themes/next/_config.yml add "little star.jpg" to
root_dir/themes/next/source/images/ <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cache:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># Remove unnecessary files after hexo generate.</span><br><span class="line">minify: true</span><br><span class="line"></span><br><span class="line">scheme: Gemini</span><br><span class="line">favicon:</span><br><span class="line">  small: /images/little star.jpg</span><br><span class="line">  medium: /images/little star.jpg</span><br><span class="line">  # small: /images/favicon-16x16-next.png</span><br><span class="line">  # medium: /images/favicon-32x32-next.png</span><br><span class="line">creative_commons:</span><br><span class="line">  size: small</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: deed.en</span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: true</span><br></pre></td></tr></table></figure> More Info: <a
href="https://theme-next.js.org/docs/third-party-services/math-equations.html">Math
Equations</a>, <a
href="https://theme-next.js.org/docs/tag-plugins/label.html">Label</a>,
<a href="https://theme-next.js.org/docs/tag-plugins/note.html">Note</a>,
<a
href="https://theme-next.js.org/docs/tag-plugins/tabs.html">Tabs</a></p>
<h3 id="sidebar"><a
href="https://theme-next.js.org/docs/theme-settings/sidebar.html">Sidebar</a></h3>
<p>NexT config file <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: right</span><br><span class="line">avatar:</span><br><span class="line">  url: /images/little star.jpg #/images/avatar.gif</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://ifshinelx.github.io || fab fa-github</span><br><span class="line">  E-Mail: mailto:ifshine_lx@163.com || fa fa-envelope</span><br><span class="line">recent_posts_title: Recent Posts</span><br><span class="line">recent_posts_layout: block</span><br><span class="line">recent_posts: true</span><br></pre></td></tr></table></figure> In
root_dir/themes/next/layout/_partials/sidebar/site-overview.njk, add the
code block: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.social %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# recent posts #&#125;</span><br><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">      &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">      &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;links-of-blogroll-list&quot; style=&quot;padding: 0px 12px;&quot;&gt;</span><br><span class="line">      &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span><br><span class="line">      &#123;% set recent_posts = posts.slice(0, 5).toArray() %&#125;</span><br><span class="line">      &#123;% for post in recent_posts %&#125;</span><br><span class="line">        &#123;% if post.title != &quot;Home&quot; %&#125;</span><br><span class="line">          &lt;li class=&quot;recent_posts_li&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123;date(post.date, &#x27;MM-DD&#x27;) &#125;&#125; &#123;&#123; post.title &#125;&#125; &lt;/a&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- if theme.creative_commons.license and theme.creative_commons.sidebar %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure> In root_dir/themes/next/source/css/main.styl,
add the code block in the file end. <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li.recent_posts_li &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    display: block;</span><br><span class="line">    word-break: keep-all;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="footer"><a
href="https://theme-next.js.org/docs/theme-settings/footer.html">Footer</a></h3>
<p>NexT config file <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  since: 2023</span><br><span class="line">  powered: false</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure> In
root_dir/themes/next/layout/_partials/footer.njk, delete the code block:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;wordcount&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure> In root_dir/themes/next/layout/_partials/footer.njk, add
the code block: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#123;%- if config.symbols_count_time.total_symbols %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;fa fa-chart-line&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &#123;%- if theme.symbols_count_time.item_text_total %&#125;</span><br><span class="line">      &lt;span&gt;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &lt;span title=&quot;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; symbolsCountTotal(site) &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="posts"><a
href="https://theme-next.js.org/docs/theme-settings/posts.html">Posts</a></h3>
<p>a <strong>Read More</strong> button in a post: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure> a
plug-in <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-word-counter --save</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure> NexT config file <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure></p>
<h3 id="custom-pagestags-categories-home"><a
href="https://theme-next.js.org/docs/theme-settings/custom-pages.html">Custom
Pages(Tags, Categories, Home)</a></h3>
<p><a
href="https://hexo.io/docs/front-matter#Categories-amp-Tags">Hexo's Docs
of Categories &amp; Tags</a> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> root_dir</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure> NexT config file
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br></pre></td></tr></table></figure></p>
<p>root_dir/source/tags/index.md <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: 2023-06-10 21:55:15</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
root_dir/source/categories/index.md <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: 2023-06-10 21:55:25</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure> tag color setting
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// create themes\next\layout\tag-color.njk</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     var alltags = document.getElementsByClassName(&#x27;tag-cloud-tags&#x27;);</span><br><span class="line">     var tags = alltags[0].getElementsByTagName(&#x27;a&#x27;);</span><br><span class="line">     for (var i = tags.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">       var golden_ratio = 0.618033988749895;</span><br><span class="line">       var s = 0.5;</span><br><span class="line">       var v = 0.999;</span><br><span class="line">       var h = golden_ratio + Math.random()*0.8 - 0.5;</span><br><span class="line">       var h_i = parseInt(h * 6);</span><br><span class="line">       var f = h * 6 - h_i;</span><br><span class="line">       var p = v * (1 - s);</span><br><span class="line">       var q = v * (1 - f * s);</span><br><span class="line">       var t = v * (1 - (1 - f) * s);</span><br><span class="line">       var r, g, b;</span><br><span class="line">       switch (h_i) &#123;</span><br><span class="line">          case 0:</span><br><span class="line">              r = v;</span><br><span class="line">              g = t;</span><br><span class="line">              b = p;</span><br><span class="line">              break;</span><br><span class="line">          case 1:</span><br><span class="line">              r = q;</span><br><span class="line">              g = v;</span><br><span class="line">              b = p;</span><br><span class="line">              break;</span><br><span class="line">          case 2:</span><br><span class="line">              r = p;</span><br><span class="line">              g = v;</span><br><span class="line">              b = t;</span><br><span class="line">              break;</span><br><span class="line">          case 3 :</span><br><span class="line">              r = p;</span><br><span class="line">              g = q;</span><br><span class="line">              b = v;</span><br><span class="line">              break;</span><br><span class="line">          case 4:</span><br><span class="line">              r = t;</span><br><span class="line">              g = p;</span><br><span class="line">              b = v;</span><br><span class="line">              break;</span><br><span class="line">          case 5:</span><br><span class="line">              r = v;</span><br><span class="line">              g = p;</span><br><span class="line">              b = q;</span><br><span class="line">              break;</span><br><span class="line">          default:</span><br><span class="line">              r = 1;</span><br><span class="line">              g = 1;</span><br><span class="line">              b = 1;</span><br><span class="line">        &#125;</span><br><span class="line">       tags[i].style.background = &quot;rgba(&quot;+parseInt(r*255)+&quot;,&quot;+parseInt(g*255)+&quot;,&quot;+parseInt(b*255)+&quot;,&quot;+0.5+&quot;)&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .tag-cloud-tags&#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    counter-reset: tags;</span><br><span class="line">  &#125;</span><br><span class="line">  .tag-cloud-tags a&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    border: 0px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 0px 10px;</span><br><span class="line">    margin: 8px;</span><br><span class="line">    color: rgba(34, 34, 34, 0.8);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud-tags a:hover&#123;</span><br><span class="line">     box-shadow: 0px 5px 15px 0px rgba(0,0,0,.4);</span><br><span class="line">     transform: scale(1.1);</span><br><span class="line">     transition-duration: 0.15s;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// modify themes\next\layout\_partials\page\tags.njk</span><br><span class="line">&lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% include &#x27;tag-color.njk&#x27; %&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// modify themes\next\layout\_macro\post.njk</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">          &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; if theme.tag_icon else &#x27;#&#x27; %&#125;</span><br><span class="line">          &lt;div class=&quot;post-tags&quot; style=&quot;margin-top: 5px;&quot;&gt;</span><br><span class="line">            &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">              &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot; style=&quot;border: 0px; border-radius: 10px; padding: 0px 10px;&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &#123;%- endfor %&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">              var tagsall=document.getElementsByClassName(&quot;post-tags&quot;)</span><br><span class="line">              for (var i = tagsall.length - 1; i &gt;= 0; i--)&#123;</span><br><span class="line">                  var tags=tagsall[i].getElementsByTagName(&quot;a&quot;);</span><br><span class="line">                  for (var j = tags.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">                      var r=Math.floor(Math.random()*75+200);</span><br><span class="line">                      var g=Math.floor(Math.random()*75+200);</span><br><span class="line">                      var b=Math.floor(Math.random()*75+200);</span><br><span class="line">                      tags[j].style.background = &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;                        </span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      &lt;/header&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>Home Page</strong>: root_dir/themes/next/layout/index.njk:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- set postlen = page.posts.toArray().length %&#125;</span><br><span class="line">  &#123;%- set post = page.posts.toArray()[postlen-1] %&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_macro/home.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="search-services"><a
href="https://theme-next.js.org/docs/third-party-services/search-services.html">Search
Services()</a></h3>
<p>Details of Algolia Search are in <a
href="https://theme-next.js.org/docs/third-party-services/search-services.html#Algolia-Search">here</a>.
<a
href="https://github.com/next-theme/hexo-generator-searchdb">Searchdb</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure> Hexo config: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># search hexo-generator-searchdb</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br><span class="line">  limit: 100</span><br></pre></td></tr></table></figure> Next config:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p>
<h3 id="waiting...-comment-systemsisso">[Waiting...] <a
href="https://theme-next.js.org/docs/third-party-services/comments.html">Comment
Systems(Isso)</a></h3>
<p>Click <a
href="https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe">link</a>
to install python3.8. You can find more versions <a
href="https://www.python.org/downloads/windows/">here</a>. Download
<em>sqlite-dll-win64-x64-3420000.zip</em> and
<em>sqlite-tools-win32-x86</em> from <a
href="https://www.sqlite.org/download.html">the official website</a>.
Create "SQlite_root_dir" and move all files from the two zips to
"SQlite_root_dir". Add "SQlite_root_dir" to the environment variable
"Path". <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l</span><br></pre></td></tr></table></figure></p>
<h3 id="waiting...-statistics-and-analyticsumami">[Waiting...] <a
href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html">Statistics
and Analytics(Umami)</a></h3>
<p><a href="http://t.csdn.cn/OCEnG">MySQL</a> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
